{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Widget Saler Widget sale system that can add customized product catalogues, delivery charge rules, and offers and calculate the total cost of an order Getting Started Prerequisites Python 3.10 Installation This project is not published to PyPI but Test PyPI instead. Thus, to install this package, we'll have to add --index-url https://test.pypi.org/simple/ before running pip install . pip install --index-url https://test.pypi.org/simple/ widget_saler This package can be found on Test PyPI here . Simple Example from widget_saler.basket import Basket from widget_saler.basket_config import BasketConfig # create a basket config with customized products, delivery cost rules, and special offer rules basket_config = BasketConfig ( products = [ { \"name\" : \"Red Widget\" , \"code\" : \"R01\" , \"price\" : 32.95 }, { \"name\" : \"Green Widget\" , \"code\" : \"G01\" , \"price\" : 24.95 }, { \"name\" : \"Blue Widget\" , \"code\" : \"B01\" , \"price\" : 7.95 }, ], delivery_cost_rules = [ { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 }, { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 }, ], special_offer_rules = [ { \"product_code\" : \"R01\" , \"product_amount\" : 2 , \"discount_ratio\" : 0.25 } ], ) # initial basket instance with customized config basket = Basket ( basket_config ) # add a product to basket # now we have {\"R01\": 1} in our basket basket . add ( \"R01\" ) # add a list of products into basket # now we have {\"R01\": 3, \"G01\": 1} in our basket basket . add ([ \"R01\" , \"R01\" , \"G01\" ]) # calculate the total price # the total would be 107.32500000000002 basket . total Detail Usage Initialize Basket Config In BasicConfig , we can customize products , delivery_cost_rules and special_offer_rules . The input format is shown as follows. from widget_saler.basket import Basket from widget_saler.basket_config import BasketConfig # create a basket config with customized products, delivery cost rules, and special offer rules basket_config = BasketConfig ( products = [ { \"name\" : \"Red Widget\" , \"code\" : \"R01\" , \"price\" : 32.95 }, { \"name\" : \"Green Widget\" , \"code\" : \"G01\" , \"price\" : 24.95 }, { \"name\" : \"Blue Widget\" , \"code\" : \"B01\" , \"price\" : 7.95 }, ], delivery_cost_rules = [ { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 }, { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 }, ], special_offer_rules = [ { \"product_code\" : \"R01\" , \"product_amount\" : 2 , \"discount_ratio\" : 0.25 } ], ) In addition to directly creating an object in Python, widger_saler also supports loading json configuration files. from widget_saler.basket_config import BasketConfig basket_config = BasketConfig . load_json ( \"config.json\" ) The following is an example of this config.json . { \"products\" : [ { \"name\" : \"Red Widget\" , \"code\" : \"R01\" , \"price\" : 32.95 }, { \"name\" : \"Green Widget\" , \"code\" : \"G01\" , \"price\" : 24.95 }, { \"name\" : \"Blue Widget\" , \"code\" : \"B01\" , \"price\" : 7.95 } ], \"delivery_cost_rules\" : [ { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 }, { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 } ], \"special_offer_rules\" : [ { \"product_code\" : \"R01\" , \"product_amount\" : 2 , \"discount_ratio\" : 0.25 } ] } Column definitions product The configuration for defining products name : the name of the product code : the id to identify this product. it'll be used in special offer rules price : the price of the product special offer rule The configuration for defining an offer for a particular product When the amount of product reaches product_amount , the user can get a discount equal to price * amount * discount_ratio . For example, \u201cbuy one red widget, get the second half price\u201d is 25% off. product_code : the product code of the product we'll apply this offer rule on product_amount : the amount of product purchased needed to get this offer discount_ratio : the discount ratio of this offer. Note that this ratio applies to the whole group For example, if we have the following setup without delivery cost rules. basket_config = BasketConfig ( products = [{ \"name\" : \"Red Widget\" , \"code\" : \"R01\" , \"price\" : 5 }], special_offer_rules = [{ \"product_code\" : \"R01\" , \"product_amount\" : 2 , \"discount_ratio\" : 0.25 }], ) When we buy the first \"R01\", we'll need to pay 5 dollars without discount as we've not yet achieved product_amount = 2 . When we buy the second \"R01\" , we can get our first discount which is 5 (price) * 2 (amount) * 0.25 (discount) = 2.5. Thus, we only need to pay 10 - 2.5 = 7.5 for this order (not including delivery cost). When we buy the third \"R01\", we won't be able to trigger another offer. Thus, we'll need to pay 7.5 + 5 = 12.5. When we buy the fourth \"R01\", we can get our second discount 2.5. The total we'll need to pay becomes 5 * 4 - 2.5 - 2.5 = 15. delivery cost rule The rule deciding the delivery cost of each purchase Each rule decides only the highest price of this delivery interval, and the previous rules will determine the lowest price of this interval. If there's no previous rule, then the lowest price of that interval will be 0. Delivery cost is calculated after the offer discount. lower_than_threshold : the highest price of this delivery cost interval (the previous rules decide the lowest price) delivery_cost : the delivery cost of this interval We sort given delivery cost rules in acceding order on the column lower_than_threshold . Given the following delivery cost rules [ { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 }, { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 } ] they'll be sorted as [ { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 }, { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 } ] which implies the following delivery cost rules. interval price 0 0 (0, 50) 4.95 [50, 90) 2.95 [90, +\u221e) 0 If the order total is 0, the delivery cost should also be 0. Therefore, 0 is not included in the first interval. Add new products to the basket In a basket, we only store the count of each product. You can pass a single product code or a list of product codes to the add method. from widget_saler.basket import Basket basket = Basket () # use the default config basket . add ( \"R01\" ) # now we have {\"R01\": 1} basket . add ([ \"R01\" , \"G01\" ]) # now we have {\"R01\": 2, \"G01\": 1} Calculate the price of the products in the basket widger_saler supports calculating the pure_toal , discount , discounted_pure_total delivery_cost , and total , of the products in the basket. pure_total : sum up all the prices of products without considering the discount or delivery cost discount : the discount after applying special_offer_rules discounted_pure_total : pure_total - discount delivery_cost : check which interval is discounted_pure_total in and get the corresponding delivery cost total : discounted_pure_total + delivery_cost Following the previous example, we have {\"R01\": 2, \"G01\": 1} in our basket. Then, we can get the following values. from widget_saler.basket import Basket basket = Basket () # use the default config basket . add ( \"R01\" ) # now we have {\"R01\": 1} basket . add ([ \"R01\" , \"G01\" ]) # now we have {\"R01\": 2, \"G01\": 1} basket . pure_total # 90.85000000000001 basket . discount # 16.475 basket . discounted_pure_total # 74.375 basket . delivery_cost # 2.95 basket . total # 77.325 Assumptions The user will use it as a Python package instead of a command line tool or an API backend. The order of the products added to the basket is irreverent. The delivery and special cost rules won't conflict. The user won't input invalid input (e.g., price < 0) There won't be a huge among of products added and the cost related property won't be called frequently. Thus, using property to calculate total could be reasonable. Otherwise, they should be turned into functions. The user won't mess up with the internal values of a Basket instance, which might break the consistency of basket_config.products and product_code_mapping . Future Improvements For improving assumption 2, if the order is reverent, we could use a list to store it. To improve assumptions 3 and 4, we could implement a validation mechanism to check whether they conflict with each other. To improve assumption 5, we could use functions to replace those property . We could run the calculation in a distributed system for even more significant data. For improving assumption 6, we could calculate only product_code_mapping and drop products when initializing. Support easier configuration ways. e.g., load from json, yaml, toml files. Float rounding Contributing See Contributing Authors Wei Lee weilee.rx@gmail.com Created from Lee-W/cookiecutter-python-template version 1.3.0","title":"Home"},{"location":"#widget-saler","text":"Widget sale system that can add customized product catalogues, delivery charge rules, and offers and calculate the total cost of an order","title":"Widget Saler"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#prerequisites","text":"Python 3.10","title":"Prerequisites"},{"location":"#installation","text":"This project is not published to PyPI but Test PyPI instead. Thus, to install this package, we'll have to add --index-url https://test.pypi.org/simple/ before running pip install . pip install --index-url https://test.pypi.org/simple/ widget_saler This package can be found on Test PyPI here .","title":"Installation"},{"location":"#simple-example","text":"from widget_saler.basket import Basket from widget_saler.basket_config import BasketConfig # create a basket config with customized products, delivery cost rules, and special offer rules basket_config = BasketConfig ( products = [ { \"name\" : \"Red Widget\" , \"code\" : \"R01\" , \"price\" : 32.95 }, { \"name\" : \"Green Widget\" , \"code\" : \"G01\" , \"price\" : 24.95 }, { \"name\" : \"Blue Widget\" , \"code\" : \"B01\" , \"price\" : 7.95 }, ], delivery_cost_rules = [ { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 }, { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 }, ], special_offer_rules = [ { \"product_code\" : \"R01\" , \"product_amount\" : 2 , \"discount_ratio\" : 0.25 } ], ) # initial basket instance with customized config basket = Basket ( basket_config ) # add a product to basket # now we have {\"R01\": 1} in our basket basket . add ( \"R01\" ) # add a list of products into basket # now we have {\"R01\": 3, \"G01\": 1} in our basket basket . add ([ \"R01\" , \"R01\" , \"G01\" ]) # calculate the total price # the total would be 107.32500000000002 basket . total","title":"Simple Example"},{"location":"#detail-usage","text":"","title":"Detail Usage"},{"location":"#initialize-basket-config","text":"In BasicConfig , we can customize products , delivery_cost_rules and special_offer_rules . The input format is shown as follows. from widget_saler.basket import Basket from widget_saler.basket_config import BasketConfig # create a basket config with customized products, delivery cost rules, and special offer rules basket_config = BasketConfig ( products = [ { \"name\" : \"Red Widget\" , \"code\" : \"R01\" , \"price\" : 32.95 }, { \"name\" : \"Green Widget\" , \"code\" : \"G01\" , \"price\" : 24.95 }, { \"name\" : \"Blue Widget\" , \"code\" : \"B01\" , \"price\" : 7.95 }, ], delivery_cost_rules = [ { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 }, { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 }, ], special_offer_rules = [ { \"product_code\" : \"R01\" , \"product_amount\" : 2 , \"discount_ratio\" : 0.25 } ], ) In addition to directly creating an object in Python, widger_saler also supports loading json configuration files. from widget_saler.basket_config import BasketConfig basket_config = BasketConfig . load_json ( \"config.json\" ) The following is an example of this config.json . { \"products\" : [ { \"name\" : \"Red Widget\" , \"code\" : \"R01\" , \"price\" : 32.95 }, { \"name\" : \"Green Widget\" , \"code\" : \"G01\" , \"price\" : 24.95 }, { \"name\" : \"Blue Widget\" , \"code\" : \"B01\" , \"price\" : 7.95 } ], \"delivery_cost_rules\" : [ { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 }, { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 } ], \"special_offer_rules\" : [ { \"product_code\" : \"R01\" , \"product_amount\" : 2 , \"discount_ratio\" : 0.25 } ] }","title":"Initialize Basket Config"},{"location":"#column-definitions","text":"","title":"Column definitions"},{"location":"#product","text":"The configuration for defining products name : the name of the product code : the id to identify this product. it'll be used in special offer rules price : the price of the product","title":"product"},{"location":"#special-offer-rule","text":"The configuration for defining an offer for a particular product When the amount of product reaches product_amount , the user can get a discount equal to price * amount * discount_ratio . For example, \u201cbuy one red widget, get the second half price\u201d is 25% off. product_code : the product code of the product we'll apply this offer rule on product_amount : the amount of product purchased needed to get this offer discount_ratio : the discount ratio of this offer. Note that this ratio applies to the whole group For example, if we have the following setup without delivery cost rules. basket_config = BasketConfig ( products = [{ \"name\" : \"Red Widget\" , \"code\" : \"R01\" , \"price\" : 5 }], special_offer_rules = [{ \"product_code\" : \"R01\" , \"product_amount\" : 2 , \"discount_ratio\" : 0.25 }], ) When we buy the first \"R01\", we'll need to pay 5 dollars without discount as we've not yet achieved product_amount = 2 . When we buy the second \"R01\" , we can get our first discount which is 5 (price) * 2 (amount) * 0.25 (discount) = 2.5. Thus, we only need to pay 10 - 2.5 = 7.5 for this order (not including delivery cost). When we buy the third \"R01\", we won't be able to trigger another offer. Thus, we'll need to pay 7.5 + 5 = 12.5. When we buy the fourth \"R01\", we can get our second discount 2.5. The total we'll need to pay becomes 5 * 4 - 2.5 - 2.5 = 15.","title":"special offer rule"},{"location":"#delivery-cost-rule","text":"The rule deciding the delivery cost of each purchase Each rule decides only the highest price of this delivery interval, and the previous rules will determine the lowest price of this interval. If there's no previous rule, then the lowest price of that interval will be 0. Delivery cost is calculated after the offer discount. lower_than_threshold : the highest price of this delivery cost interval (the previous rules decide the lowest price) delivery_cost : the delivery cost of this interval We sort given delivery cost rules in acceding order on the column lower_than_threshold . Given the following delivery cost rules [ { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 }, { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 } ] they'll be sorted as [ { \"lower_than_threshold\" : 50 , \"delivery_cost\" : 4.95 }, { \"lower_than_threshold\" : 90 , \"delivery_cost\" : 2.95 } ] which implies the following delivery cost rules. interval price 0 0 (0, 50) 4.95 [50, 90) 2.95 [90, +\u221e) 0 If the order total is 0, the delivery cost should also be 0. Therefore, 0 is not included in the first interval.","title":"delivery cost rule"},{"location":"#add-new-products-to-the-basket","text":"In a basket, we only store the count of each product. You can pass a single product code or a list of product codes to the add method. from widget_saler.basket import Basket basket = Basket () # use the default config basket . add ( \"R01\" ) # now we have {\"R01\": 1} basket . add ([ \"R01\" , \"G01\" ]) # now we have {\"R01\": 2, \"G01\": 1}","title":"Add new products to the basket"},{"location":"#calculate-the-price-of-the-products-in-the-basket","text":"widger_saler supports calculating the pure_toal , discount , discounted_pure_total delivery_cost , and total , of the products in the basket. pure_total : sum up all the prices of products without considering the discount or delivery cost discount : the discount after applying special_offer_rules discounted_pure_total : pure_total - discount delivery_cost : check which interval is discounted_pure_total in and get the corresponding delivery cost total : discounted_pure_total + delivery_cost Following the previous example, we have {\"R01\": 2, \"G01\": 1} in our basket. Then, we can get the following values. from widget_saler.basket import Basket basket = Basket () # use the default config basket . add ( \"R01\" ) # now we have {\"R01\": 1} basket . add ([ \"R01\" , \"G01\" ]) # now we have {\"R01\": 2, \"G01\": 1} basket . pure_total # 90.85000000000001 basket . discount # 16.475 basket . discounted_pure_total # 74.375 basket . delivery_cost # 2.95 basket . total # 77.325","title":"Calculate the price of the products in the basket"},{"location":"#assumptions","text":"The user will use it as a Python package instead of a command line tool or an API backend. The order of the products added to the basket is irreverent. The delivery and special cost rules won't conflict. The user won't input invalid input (e.g., price < 0) There won't be a huge among of products added and the cost related property won't be called frequently. Thus, using property to calculate total could be reasonable. Otherwise, they should be turned into functions. The user won't mess up with the internal values of a Basket instance, which might break the consistency of basket_config.products and product_code_mapping .","title":"Assumptions"},{"location":"#future-improvements","text":"For improving assumption 2, if the order is reverent, we could use a list to store it. To improve assumptions 3 and 4, we could implement a validation mechanism to check whether they conflict with each other. To improve assumption 5, we could use functions to replace those property . We could run the calculation in a distributed system for even more significant data. For improving assumption 6, we could calculate only product_code_mapping and drop products when initializing. Support easier configuration ways. e.g., load from json, yaml, toml files. Float rounding","title":"Future Improvements"},{"location":"#contributing","text":"See Contributing","title":"Contributing"},{"location":"#authors","text":"Wei Lee weilee.rx@gmail.com Created from Lee-W/cookiecutter-python-template version 1.3.0","title":"Authors"},{"location":"contributing/","text":"Step 1. Fork this repository to your GitHub Step 2. Clone the repository from your GitHub git clone https://github.com/ [ YOUR GITHUB ACCOUNT ] /widget_saler.git Step 3. Add this repository to the remote in your local repository git remote add upstream \"https://github.com/Lee-W/widget-saler\" You can pull the latest code in the main branch through git pull upstream main afterward. Step 4. Check out a branch for your new feature git checkout -b [ YOUR FEATURE ] Step 5. Install prerequisite python -m pip install pipx python -m pipx install poetry invoke python -m pipx ensurepath pipx : for python tool management poetry : for dependency management invoke : for task management Step 6. Create your local Python virtual environment and install dependencies inv env.init-dev Step 7. Work on your new feature Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit Step 8. Run test cases Make sure all test cases pass. inv test Step 9. Run test coverage Check the test coverage and see where you can add test cases. inv test.cov Step 10. Reformat source code Format your code through black and isort . inv style.reformat Step 11. Run style check Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint Step 12. Run security check Ensure the packages installed are secure, and no server vulnerability is introduced inv secure Step 13. Create a Pull Request and celebrate \ud83c\udf89","title":"Contributing"},{"location":"contributing/#step-1-fork-this-repository-to-your-github","text":"","title":"Step 1. Fork this repository to your GitHub"},{"location":"contributing/#step-2-clone-the-repository-from-your-github","text":"git clone https://github.com/ [ YOUR GITHUB ACCOUNT ] /widget_saler.git","title":"Step 2. Clone the repository from your GitHub"},{"location":"contributing/#step-3-add-this-repository-to-the-remote-in-your-local-repository","text":"git remote add upstream \"https://github.com/Lee-W/widget-saler\" You can pull the latest code in the main branch through git pull upstream main afterward.","title":"Step 3. Add this repository to the remote in your local repository"},{"location":"contributing/#step-4-check-out-a-branch-for-your-new-feature","text":"git checkout -b [ YOUR FEATURE ]","title":"Step 4. Check out a branch for your new feature"},{"location":"contributing/#step-5-install-prerequisite","text":"python -m pip install pipx python -m pipx install poetry invoke python -m pipx ensurepath pipx : for python tool management poetry : for dependency management invoke : for task management","title":"Step 5. Install prerequisite"},{"location":"contributing/#step-6-create-your-local-python-virtual-environment-and-install-dependencies","text":"inv env.init-dev","title":"Step 6. Create your local Python virtual environment and install dependencies"},{"location":"contributing/#step-7-work-on-your-new-feature","text":"Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit","title":"Step 7. Work on your new feature"},{"location":"contributing/#step-8-run-test-cases","text":"Make sure all test cases pass. inv test","title":"Step 8. Run test cases"},{"location":"contributing/#step-9-run-test-coverage","text":"Check the test coverage and see where you can add test cases. inv test.cov","title":"Step 9. Run test coverage"},{"location":"contributing/#step-10-reformat-source-code","text":"Format your code through black and isort . inv style.reformat","title":"Step 10. Reformat source code"},{"location":"contributing/#step-11-run-style-check","text":"Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint","title":"Step 11. Run style check"},{"location":"contributing/#step-12-run-security-check","text":"Ensure the packages installed are secure, and no server vulnerability is introduced inv secure","title":"Step 12. Run security check"},{"location":"contributing/#step-13-create-a-pull-request-and-celebrate","text":"","title":"Step 13. Create a Pull Request and celebrate \ud83c\udf89"}]}